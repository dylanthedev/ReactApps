{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","this","components_Titles","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cfeaa39.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n  //class is a reserved keyword in js, must be className\r\n  <div>\r\n    <h1 className=\"title-container-title\">What's the Weather like in...</h1>\r\n    <h3 className=\"title-container-subtitle\">Find out Temperature, conditions and more using ReactJS</h3>\r\n  </div>\r\n);\r\n\r\n// class Titles extends React.Component {\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <h1>Weather Finder</h1>\r\n//         <p>Find out Temperature, conditions and more...</p>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n//with every file you make you need to export it then import it in the app.js\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\n//v2 -\r\nconst Form = props => (\r\n  <form onSubmit={props.getWeather}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n    <button>Get Weather</button>\r\n  </form>\r\n);\r\n\r\n//v1\r\n// class Form extends React.Component {\r\n//   render() {\r\n//     return (\r\n//       <form onSubmit={this.props.getWeather}>\r\n//         <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n//         <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n//         <button>Get Weather</button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\n//v2 no longer uses a Weather class\r\n//so no need for this. on each value\r\n// const Weather = (props) => {\r\n//   return (\r\n//     <div>\r\n//       {props.city && props.country &&\r\n//         <p>Location: {props.city}, {props.country}</p>}\r\n//       {props.temperature && <p>Temperature: {props.temperature}</p>}\r\n//       {props.humidity && <p>Humidity: {props.humidity}</p>}\r\n//       {props.description && <p>Description: {props.description}</p>}\r\n//       {props.error && <p>{this.props.error}</p>}\r\n//     </div>\r\n//   );\r\n// }\r\n//v3 - explicitely returning values\r\nconst Weather = (props) => (\r\n  <div className=\"weather-info\">\r\n    {\r\n      props.city && props.country &&\r\n      <p className=\"weather-key\">Location: <span className=\"weather-value\"> {props.city}, {props.country}</span></p>\r\n    }\r\n    {\r\n      props.temperature &&\r\n      <p className=\"weather-key\">Temperature: <span className=\"weather-value\"> {props.temperature}&#176;</span></p>\r\n    }\r\n    {\r\n      props.humidity &&\r\n      <p className=\"weather-key\">Humidity: <span className=\"weather-value\"> {props.humidity}%</span></p>\r\n    }\r\n    {\r\n      props.description &&\r\n      <p className=\"weather-key\">Description: <span className=\"weather-value\"> {props.description}</span></p>\r\n    }\r\n    {\r\n      //<p className=\"weather-error\">test</p>\r\n      props.error &&\r\n      <p className=\"weather-error\">{props.error}</p>\r\n    }\r\n  </div>\r\n);\r\n\r\n//v1 a little more code\r\n// class Weather extends React.Component {\r\n//   render() {\r\n//     //if city and country is defined, display p tag\r\n//     return (\r\n//       <div>\r\n//         {this.props.city && this.props.country &&\r\n//           <p>Location: {this.props.city}, {this.props.country}</p>}\r\n//         {this.props.temperature && <p>Temperature: {this.props.temperature}</p>}\r\n//         {this.props.humidity && <p>Humidity: {this.props.humidity}</p>}\r\n//         {this.props.description && <p>Description: {this.props.description}</p>}\r\n//         {this.props.error && <p>{this.props.error}</p>}\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\nexport default Weather;\r\n","// import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n//\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n//\n// export default App;\n//import react object from react package in package.json\nimport React from \"react\";\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\n//this is my api key\nconst API_KEY = \"47c86db9f4798a79773bbfdb1b6b61f6\";\n//const API_KEY = \"341f92eb4b0f3362758044610e9758b5\";\n//const API_KEY = \"3585775f387b0d0cba6c5b3dc41b8167\";\n//initalizes component\nclass App extends React.Component {\n  //old way\n  //constructor() {\n//   this.getWeather = this.getWeather.bind(this);\n// }\n\nstate = {\n  temperature: undefined,\n  city: undefined,\n  country: undefined,\n  humidity: undefined,\n  description: undefined,\n  error: undefined\n}\n  //method to get the weather\n  //asynx await\n  getWeather = async (e) => {\n    //stops page refresh when Get Weather button is clicked\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    //async await\n    //const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`);\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=imperial`);\n    //converts api_call to readable format for program,\n    //in this case its json\n    const data = await api_call.json();\n\n    //this prevents the user from hitting submit without\n    //filling out the form\n    if (city && country) {\n      console.log(data);\n      //set values of state\n      this.setState({\n        //these values are found from calling the api_call\n        //which is the data constant\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    }\n    else {\n      this.setState({\n        //these values are found from calling the api_call\n        //which is the data constant\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values!\"\n      });\n    }\n\n\n  }\n  //built in react method that returns jsx\n  render() {\n    return (\n      //babble converts this to html\n      //getWeather is a prop that is equal to this.methodName\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}/>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\n\n//makes App.js available for other files to import\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//method that is applying to div with id of root in index.html\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}